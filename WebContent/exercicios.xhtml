<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html">

<head>
<title>Register Person</title>
<h:outputStylesheet library="css" name="bootstrap.min.css" />
<h:outputStylesheet library="css" name="bootstrap-theme.min.css" />
<h:outputStylesheet library="css" name="default.css" />
</head>

<body>
	<h1>Exercícios:</h1>
	<hr />
	<h2>Exercicio 1</h2>
	<ul>
		<li>Criar um modelo de dados <strong>não persistido</strong>
			chamado Cachorro
		</li>
		<li>O cachorro possui um nome, raça e idade</li>
		<li>Criar um bean gerenciavel chamado CachorroBean</li>
		<li>O bean gerencia um formulário e uma página de listagem de
			cachorros</li>
		<li>Desenvolva as duas páginas de forma que se comuniquem com o
			Bean</li>
	</ul>

	<h2>Exercicio 2</h2>
	<ul>
		<li>Criar um modelo de dados <strong>não persistido</strong>
			chamado Gato
		</li>
		<li>O gato possui um nome, raça e idade</li>
		<li>Criar um bean gerenciavel, com suporte a sessão chamado
			GatoBean</li>
		<li>Criar 2 páginas conectadas entre si, uma página de registro e
			outra de listagem</li>
		<li>Ao finalizar o cadastro de algum registro se faz necessário
			mostar a página de listagem</li>
	</ul>

	<h2>Exercicio 3</h2>
	<ul>
		<li>Criar um modelo de dados <strong>não persistido</strong>
			chamado Iguana
		</li>
		<li>A iguana possui um nome e idade</li>
		<li>Criar um bean gerenciavel, com suporte a sessão chamado
			IguanaBean</li>
		<li>Criar 2 páginas conectadas entre si, uma página de registro e
			outra de listagem</li>
		<li>Ao finalizar o cadastro de algum registro se faz necessário
			mostar a página de listagem</li>
		<li>Defina um layout único para página de registro e listagem</li>
		<li>Este layout possui um conteúdo e um header</li>
		<li>O header possuí os links de navegação de entre os links</li>
		<li>Crie duas páginas com qualquer conteúdo: uma com apenas o
			conteúdo definido e outra com apenas o header definido</li>
	</ul>

	<h2>Exercicio 4</h2>
	<ul>
		<li>Criar um modelo de dados <strong>não persistido</strong>
			chamado Cobra
		</li>
		<li>A cobra possui um nome, dia de captura, tamanho e peso</li>
		<li>Criar um bean gerenciavel, com suporte a sessão chamado
			CobraBean</li>
		<li>Criar 2 páginas conectadas entre si, uma página de registro e
			outra de listagem</li>
		<li>A página de listagem tem suporte a remoção do lado listado</li>
		<li>Defina um layout único para página de registro e listagem</li>
		<li>Este layout possui um conteúdo e um header</li>
		<li>Este layout possui uma barra de navegação entre as 2 paginas</li>
		<li>Exiba os valores no padrão de exibição brasileiro</li>
	</ul>

	<h2>Exercicio 5</h2>
	<ul>
		<li>Betainc. precisa salvar sua lista de clientes.</li>
		<li>Estes clientes possuem: nome, data de nascimento, endereço e
			a quantidade de reais que já gastou.</li>
		<li>Além dos clientes é necessário cadastrar os vendedores, estes
			possuem como dados: nome, data de nascimento, endereço e a sua lista
			de clientes</li>
		<li>Desenvolver uma app JSF que gerencie o cadastro, a listagem e
			a remoção destes dados</li>
		<li>Tente deixar a aplicação bonita se for capaz</li>
	</ul>

	<h2>Exercicio 6</h2>
	<ul>
		<li>Monster Care LTDA. precisa de um sistema para gerenciar seus
			clientes</li>
		<li>Seus clientes são cadastrados com nome, email, data de
			nascimento e telefone</li>
		<li>O telefone é de tipo numerico que possui uma máscara que seja
			compatível com o exemplo: (48) 5544-3344</li>
		<li>A data de nascimento do tipo date deve ser inserido no
			formato que suporte o exemplo: 2014-10-30</li>
		<li>Todos os campos são obrigatórios</li>
		<li>Implemente tudo utilizando JSF e DEPOIS deixe bonito</li>
	</ul>

	<br />
	<br />
	<br />
	<br />
	<br />
	<br />
	<br />
	<br />
</body>

</html>